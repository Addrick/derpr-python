from src.message_handler import *
from src.persona import *
from src.chat_system import *
from src.utils import *
import unittest
from unittest.mock import Mock

# generated by chatgpt and they all suck


class TestBotLogic(unittest.TestCase):
    def setUp(self):
        self.chat_system = ChatSystem()
        self.bot = BotLogic(self.chat_system)
        self.chat_system.load_personas_from_file('test_personas')
        self.message = Mock()
        self.maxDiff = None

    def test_preprocess_message_with_invalid_command(self):
        self.message.content = "testr invalid_command This is a test"
        response = self.bot.preprocess_message(self.message)
        self.assertEqual(response, None)  # no response is the flag to generate a model response later in main(). Maybe should be more explicit

    def test_handle_help(self):
        self.message.content = 'testr help'
        response = self.bot.preprocess_message(self.message)
        self.assertTrue("Talk to a specific persona by starting your message with their name." in response)

    def test_handle_set_model(self):
        # Check what model is current for validation
        self.message.content = 'testr what model'
        response = self.bot.preprocess_message(self.message)
        print(response)
        self.assertTrue("gpt-3.5-turbo" in response)  # usual default

        # Test setting
        self.message.content = 'testr set model gpt-4'
        response = self.bot.preprocess_message(self.message)
        self.assertEqual("Model set to \'gpt-4\'.", response)

        # Test what model
        self.message.content = 'testr what model'
        response = self.bot.preprocess_message(self.message)
        print(response)
        self.assertTrue("gpt-4" in response)

    def test_handle_remember(self):
        # doesn't really confirm internal methods like persona.set_prompt
        # TODO: currently reads persona info from separate persona file but the saving functions still call the default save location
        og_prompt = self.chat_system.personas['testr'].get_prompt()

        self.message.content = 'testr remember this is a test if you remember via adding to your prompt'
        response = self.bot.preprocess_message(self.message)
        expected_start = 'New prompt for testr:'
        expected_end = 'this is a test if you remember via adding to your prompt'
        self.assertTrue(expected_start in response)
        self.assertTrue(expected_end in response)

        # reset the prompt after to unfuck the normal persona file
        self.chat_system.personas['testr'].set_prompt(og_prompt)


if __name__ == '__main':
    unittest.main()
